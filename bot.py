from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext, JobQueue
import sqlite3
from datetime import datetime, time

TOKEN = "7429779028:AAHsO1eKLL7-m-vhzf8m-i3bBX1kaheo7Io"

DB_PATH = "db/finance.db"

def execute_query(query, params=()):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        return cursor.fetchall()


async def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    username = update.message.chat.username

    user = execute_query("SELECT * FROM users WHERE chat_id = ?", (user_id,))
    if not user:
        execute_query("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, user_id))
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    inline_keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="set_budget")],
    ]
    reply_markup_inline = InlineKeyboardMarkup(inline_keyboard)

    reply_keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["–ë—é–¥–∂–µ—Ç", "–ü–æ–º–æ—â—å"],
        ["–û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ"]
    ]
    reply_markup_reply = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup_inline)
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º:", reply_markup=reply_markup_reply)


async def handle_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "add_expense":
        await query.message.reply_text(
            "üí∏ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `<–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ï–¥–∞ 500` –∏–ª–∏ `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 150`.",
            parse_mode="Markdown"
        )
        context.user_data["action"] = "add_expense"
    elif query.data == "view_stats":
        await stats(update, context)
    elif query.data == "set_budget":
        await query.message.reply_text(
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü:* \n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `50000`",
            parse_mode="Markdown"
        )
        context.user_data["action"] = "set_budget"

async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.lower()

    if text == "–ø–æ–º–æ—â—å":
        await help_command(update, context)
        return
    elif text == "–¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        await update.message.reply_text(
            "üí∏ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `<–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ï–¥–∞ 500` –∏–ª–∏ `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 150`.",
            parse_mode="Markdown"
        )
        context.user_data["action"] = "add_expense"
        return
    elif text == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats(update, context)
        return
    elif text == "–±—é–¥–∂–µ—Ç":
        await update.message.reply_text(
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü:* \n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `50000`",
            parse_mode="Markdown"
        )
        context.user_data["action"] = "set_budget"
        return
    elif text == "–æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ":
        context.user_data["action"] = "reset_expenses"
        await update.message.reply_text(
            "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã?* ‚ö†Ô∏è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ '–¥–∞', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode="Markdown"
        )
        return

    if "action" not in context.user_data:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")
        return

    action = context.user_data["action"]

    if action == "add_expense":
        try:
            category, amount = update.message.text.split()
            amount = float(amount)

            user_id = update.message.chat_id
            execute_query(
                "INSERT INTO transactions (user_id, category, amount, date) VALUES ((SELECT id FROM users WHERE chat_id = ?), ?, ?, ?)",
                (user_id, category, amount, datetime.now())
            )
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
            await update.message.reply_text(
                f"‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥!*\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category.capitalize()}*\n"
                f"–°—É–º–º–∞: *{amount}‚ÇΩ*\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã! üí∞",
                parse_mode="Markdown"
            )

        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>.")
        finally:
            context.user_data.pop("action", None)

    elif action == "set_budget":
        try:
            budget = float(update.message.text)
            user_id = update.message.chat_id

            execute_query(
                "INSERT OR REPLACE INTO budget (user_id, monthly_limit) VALUES ((SELECT id FROM users WHERE chat_id = ?), ?)",
                (user_id, budget)
            )
            await update.message.reply_text(
                f"üéØ *–ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!* \n\n"
                f"–ë—é–¥–∂–µ—Ç: *{budget}‚ÇΩ*",
                parse_mode="Markdown"
            )
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ —á–∏—Å–ª–æ–º.")
        finally:
            context.user_data.pop("action", None)

    elif action == "reset_expenses":
        if text == "–¥–∞":
            user_id = update.message.chat_id
            execute_query("DELETE FROM transactions WHERE user_id = (SELECT id FROM users WHERE chat_id = ?)", (user_id,))
            await update.message.reply_text("üîÑ *–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã!*", parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùå *–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*", parse_mode="Markdown")
        context.user_data.pop("action", None)

async def stats(update: Update, context: CallbackContext):
    if update.callback_query:
        user_id = update.callback_query.message.chat_id
        message = update.callback_query.message
    else:
        user_id = update.message.chat_id
        message = update.message

    rows = execute_query(
        "SELECT category, SUM(amount) FROM transactions WHERE user_id = (SELECT id FROM users WHERE chat_id = ?) GROUP BY category",
        (user_id,)
    )

    if not rows:
        await message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    stats_message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n\n"
    for category, total in rows:
        stats_message += f"- üóÇ *{category.capitalize()}:* {total}‚ÇΩ\n"

    total_expenses = sum(row[1] for row in rows)
    budget = execute_query(
        "SELECT monthly_limit FROM budget WHERE user_id = (SELECT id FROM users WHERE chat_id = ?)",
        (user_id,)
    )
    budget = budget[0][0] if budget else None

    if budget :
        progress = (total_expenses / budget) * 100
        stats_message += (
            f"\nüéØ *–ë—é–¥–∂–µ—Ç:* {budget}‚ÇΩ\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {total_expenses}‚ÇΩ\n"
            f"üìà *–°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞:* {progress:.2f}%"
        )

    await message.reply_text(stats_message, parse_mode="Markdown")

async def reset_expenses(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    execute_query("DELETE FROM transactions WHERE user_id = (SELECT id FROM users WHERE chat_id = ?)", (user_id,))
    await update.message.reply_text("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã.")

async def reset_expenses_job(context: CallbackContext):
    execute_query("DELETE FROM transactions WHERE date < date('now', 'start of month')")
    print("All expenses reset at the beginning of the month.")

async def help_command(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help."""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="set_budget")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "2Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=reply_markup
    )

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset_expenses", reset_expenses))

    application.add_handler(CallbackQueryHandler(handle_button_click))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    job_queue = application.job_queue
    job_queue.run_monthly(reset_expenses_job, when=time(hour=0, minute=0), day=1)

    application.run_polling()

if __name__ == "__main__":
    main()
